
ACID四个特性
https://zhuanlan.zhihu.com/p/133823461
https://zhuanlan.zhihu.com/p/117476959
https://www.zhihu.com/question/31346392/answer/362597203
https://www.zhihu.com/question/30272728/answer/72476703
https://zhuanlan.zhihu.com/p/55191995 
https://www.zhihu.com/question/59729819/answer/284180647
https://zhuanlan.zhihu.com/p/267143540
https://www.zhihu.com/question/357887214
https://zhuanlan.zhihu.com/p/172530683
https://zhuanlan.zhihu.com/p/240745429

redo-log  物理磁盘Page的     先反向后正向重做       
Undo-log  逻辑反向语句的     反向的事务回滚的 
写undo的redo
写undo
修改数据页
写数据页的Redo


一致性  而事务具备ACID里C的特性是说通过事务的AID来保证我们的一致性.
        一个事务事务开始前和结束后 不管成功还是失败 从一个正确的状态,迁移到另一个正确的状态
        多个事务间并发 单个事务开始和结束之间的中间状态不会被其他事务看到
原子性  一个事务内的所有SQL操作是一个整体 要么全成功 要么全失败 redo-log  Undo-log
持久性  一个事务提交后，对系统的影响是永久的 redo-log    
隔离性  多个事务间并发 不同隔离级别 适当的破坏一致性来提升性能与并行度  MVCC[隐藏字段 undo-log ReadView] + 锁 [表 行 + gap = Next-Key] [读共享 写排他]

             当前读       快照读 MVCC[隐藏字段 undo-log ReadView]   当前锁定读     SELECT
        [                               当前锁定读                            ]  SELECT …… LOCK IN SHARE MODE | SELECT …… FOR UPDATE
        Read Uncommitted => Read Committed =》 Repeated Read  => Serialization 
                                                                                写加锁

https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-isolation-levels.html
https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html
In the InnoDB transaction model, the goal is to combine 
the best properties of a multi-versioning database MVCC[隐藏字段 undo-log ReadView] 
MySQL实现的MVCC，主要是用于在并发读写的情况下，保证 “读” 数据时无需加锁也可以读取到数据的某一个版本的快照，好处是可以避免加锁，降低开销，解决了读写冲突，增大了数据库的并发性能。
MySQL中MVCC主要是通过行记录中的隐藏字段（隐藏主键 row_id、事务ID trx_id、回滚指针 roll_pointer）、undo log（版本链）、ReadView（一致性读视图）来实现的。    
with  traditional two-phase locking 锁 [表 行 + gap = Next-Key] [读共享 写排他]

READ UNCOMMITTED
    当前读SELECT 每次都读取记录的最新版本    |脏读 不可重复读 幻读
    当前锁定读SELECT..[LOCK IN SHARE MODE|FOR UPDATE ] 和 写[ UPDATE|DELETE ]  加锁  

READ COMMITTED
    快照读SELECT MVVC  Consistent-Reads the snapshot is reset to the time of each consistent read operation  |不可重复读 幻读
    当前锁定读 和 写  加锁
        
REPEATABLE READ
    快照读SELECT MVVC  Consistent-Reads the snapshot is based on the time when the first read operation is performed   |幻读
    当前锁定读 和 写  加锁

SERIALIZABLE 
    当前锁定读 和 写  加锁


MVVC    https://juejin.cn/post/7066633257781035045

                 is
        表级锁定         那意向锁是要解决一个什么问题呢？表锁与行锁共存的问题
                 ix
                        
                 S      read 
锁      行记录锁         Record Locks the row-level locks are actually index-record locks 
                 X      read or update or delete  
          (+)     
        gap Lock        insert  only purpose is to prevent other transactions from inserting to the gap

          (||)
        Next-Key 

--------------------------------------------------------------------------------------------------------------------------------------------------------
https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html


Leaf query clauses 
  Leaf query clauses look for a particular value in a particular field, 
  such as the match, term or range queries. These queries can be used by themselves

    Full text queries      (先analyzers分词https://www.elastic.co/guide/en/elasticsearch/reference/current/full-text-queries.html)
        match
        match_phrase
            https://stackoverflow.com/questions/23150670/elasticsearch-match-vs-term-query
            https://www.cnblogs.com/yjf512/p/4897294.html 

    Term level queries      https://www.elastic.co/guide/en/elasticsearch/reference/current/term-level-queries.html
        term  => = 
        range => between_and  
        exists missing => isnull 
        ids 
                  
Compound query clauses
  Compound query clauses wrap other leaf or compound queries and are used 
  to combine multiple queries in a logical fashion (such as the bool or dis_max query)
  or to alter their behaviour switch from query to filter context.(such as the constant_score query)

        bool query
        （The default query for combining multiple leaf or compound query clauses）
            
            must => and 
            should  => or         ->in Query context  【relevance score】
            ---------------------------------------------------------------
            must_not => not       ->in filter context 【constant score 】
            filter
        

        boosting query             （重要是如何计算score）
        constant_score query
        dis_max query
   

Query-Filter-context
    https://www.elastic.co/guide/en/elasticsearch/reference/current/query-filter-context.html#relevance-scores

    query context  default 
        deciding whether or not the document matches, the query clause also calculates a relevance score in the _score meta-field
        Query context is in effect whenever a query clause is passed to a query parameter

    filter contex
        deciding whether or not the document matches, no scores are calculated 【constant_score】
        Filter context is in effect whenever a query clause is passed to a filter parameter 【by Compound query clauses swift】

AST
                                           query

                                           bool

                    filter                                           must

    publish_date range   status term published        content match xxx  title match_phrase

              and+  
         or*       a1
      b3    c5

         
聚合 
    http://www.elastic.co/guide/cn/elasticsearch/guide/current/aggs-high-level.html





三维    八叉树                   
                二叉树          
                KDtree      K-D-Btree         Rtree 

二维    四叉树
        Geohash


一维        二叉树                              Btree



https://github.com/halfrost/Halfrost-Field
https://skipperkongen.dk/files/spatialtrees_presentation.pdf
https://stackoverflow.com/questions/4326332/what-is-the-difference-between-a-kd-tree-and-a-r-tree
----------------------------------------------------------------------------------------------------------------------------------------------------------


https://zhuanlan.zhihu.com/p/81273236

磁盘 扇区 =》 文件系统 块 =》InnoDB 页 / es segment 

https://www.zhihu.com/question/23395090/answer/24455833
POSIX    fsync mmap 

InnoDB
    https://zhuanlan.zhihu.com/p/25396263
    https://zhuanlan.zhihu.com/p/48327345

es

    shared                           node

    s0          p0  r0 

    s1          p1  r1              [p0 r1]     [p1 r2]     [p2 r0]    

    s2          p2  r2

    https://elasticsearch.cn/article/6178
    https://juejin.im/post/5d39a5a2f265da1ba252a55f
    https://liuzhihang.com/2019/03/12/elasticsearch-data-writing-process.html
    https://www.bogotobogo.com/Hadoop/ELK/ELK_Elastic_Search_Tutorial.php
    https://www.cnblogs.com/hello-shf/p/11553317.html
    https://www.easyice.cn/archives/323?utm_source=tuicool&utm_medium=referral
    https://www.cnblogs.com/Alandre/p/11358954.html
    https://www.cnblogs.com/forfuture1978/archive/2010/03/06/1679501.html




------浮点数相关------------------------------------------------------------------------------------------------------------------------------------------



http://www.delphigroups.info/2/52/412021.html
http://forums.digital-metaphors.com/discussion/7746/round-precision-problem
https://zhidao.baidu.com/question/1239797789414247099.html
https://stackoverflow.com/questions/26962575/round-half-to-even-on-decimal#
http://www.xbeat.net/vbspeed/i_BankersRounding.htm


1   
    the finite precision of floating point values 

                原码         反码          补码
    正数+7    00000111  =  00000111  =   00000111
    
    负数-7    10000111     11111000      11111001 

    http://c.biancheng.net/view/314.html
    https://www.zhihu.com/question/266361072/answer/364022235
    http://www.ruanyifeng.com/blog/2010/06/ieee_floating-point_representation.html



2
    Standard rounding    
    Bankers Rounding     



https://www.zhihu.com/question/28632072
https://zhuanlan.zhihu.com/p/33333351
http://bartaz.github.io/ieee754-visualization/
https://docs.python.org/zh-cn/3/tutorial/floatingpoint.html  2.675  样例31
https://github.com/bartaz/ieee754-visualization#ieee-754-double-precision-floating-point-visualization


                0和1       

        与AND   与非门 
                或非门                               
        或OR             半加器    全加器    加法   减法(取反，加法)
                异或                               乘法(移位，逻辑判断，累加)
        非NOT                                      除法(移位，逻辑判断，累减)

数据指令 读写

运算指令 序 代数  拓扑

控制指令 顺序 分支 循环 （if-switch + while-for = 状态机）





                                                   
                                                                 实数科学计数法
    
                             组合数
0 1 2 3 4 (5) 6 7 8 9  [10]  单音shi  11  12  13         a×10^b     1≤|a|<10      指数每+y，小数点都会左移y位，对应数 x10
                             取0进1                      2*10^2                   2 小数点都会移第2位 得200
            5.1                                          5.1 * 10^0  

                                                      

         组合数                                             
0 1 [10] 单音er  11 100  (101)                           a×10^b     1≤|a|<10      指数每+y，小数点都会左移y位，对应数 x10
         取0进1                                          [10]*[10]^10             10 小数点都会第10位 得1000
                                                     

        [ 5 ] . [ 1 ] 

        101     0.0 0011 0011...0011..(0011无限循环)  

            101.0 0011 0011.....0011..(0011无限循环)  

                                                        1.010 0011 0011......0011...... (0011无限循环)  2^-2


                                                        双精度存入内存 有限化

                                                        1.010001100110011001100110011001100110011001100110011 0011 0011 (0011无限循环) * 2^-2

                                                        1.010001100110011001100110011001100110011001100110011 0 * 2^-2


                                                        0,                                                                   s  5.1是正数，所以符号位是0；  
                                                        10000000001                                                          E  指数E = 2 + 1023 = 1025   阶码
                                                        010 0011 0011 0011 0011 0011 0011 0011 0011 0011 0011 0011 0011 0    M  双精度存入内存 有限化 排查第一个1   尾数（有效数字）

                                                        (-1)^s  * 2^E *  M


php的 BCMath        https://github.com/xinliangnote/PHP
c# mysql decimal的  https://www.zhihu.com/question/275471150/answer/381843960  https://zhuanlan.zhihu.com/p/60952919
http://rvelthuis.de/articles/articles-floats.html https://www.cnblogs.com/findumars/
https://blog.youxu.info/2014/06/10/postscript/






-------编码加密相关--------------------------------------------------------------------------------------------------------------------------------------------------



编码算法 一一对应

    URL编码和Base64编码都是编码算法，它们不是加密算法；

    URL编码的目的是把任意文本数据编码为%前缀表示的文本，便于浏览器和服务器处理；

    Base64编码的目的是把任意二进制数据编码为文本，但编码后数据量会增加1/3。


哈希算法 （Hash）又称摘要算法（Digest）

    相同的输入一定得到相同的输出；
    不同的输入大概率得到不同的输出。
    哈希算法的目的就是为了验证原始数据是否被篡改。


对称加密算法

    secret  = encrypt(key, message);
    message = decrypt(key, secret);


非对称加密算法  非对称加密就是加密和解密使用的不是相同的密钥，只有同一个公钥-私钥对才能正常加解密；
    
    通常是用公钥加密，私钥解密
    secret  = encrypt(publicKey, message)
    message = decrypt(privateKey, secret)

    或

    私钥加密，那相当于所有人都可以用公钥解密.  私钥加密得到的密文实际上就是数字签名 防止伪造抵赖篡改 ; 私钥就相当于用户身份 而公钥用来给外部验证用户身份.
    signature = encrypt(privateKey, sha256(message))  
    sha256(message) = decrypt(publicKey, signature)

    
数字证书  存储的是公钥,以及相关的证书链和 数字签名算法信息   publicKey + 明文message +  [ signature = encrypt(privateKey, sha256(message))  ]

    以HTTPS协议为例，浏览器和服务器建立安全连接的步骤如下：

    浏览器向服务器发起请求，服务器向浏览器发送自己的数字证书；
    浏览器用操作系统内置的Root CA来验证服务器的证书是否有效，如果有效，就使用该证书存储的公钥加密一个随机的AES口令并发送给服务器；https://www.jianshu.com/p/44a3efae1d84
    服务器用自己的私钥解密获得AES口令，并在后续通讯中使用AES加密。






---------utf8编码----------------------------------------


http://www.regexlab.com/zh/encoding.htm
https://codepoints.net/U+20BB7
https://stackoverflow.com/questions/36527642/difference-between-codepointat-and-charcodeat
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt
https://developer.mozilla.org/zh-CN/docs/Web/API/Blob/Blob
https://baike.baidu.com/item/Unicode/750500?fr=aladdin
https://stackoverflow.com/questions/6986789/why-are-some-bytes-prefixed-with-0xf7-when-using-charset-x-user-defined-with-xm


       [97, 63460, 63416, 63405, 63472, 63392, 63406, 63415]
        61  f7e4   f7b8   f7ad   f7f0   f7a0   f7ae   f7b7   This is a Private Use codepoint //https://codepoints.net/U+f7ad   
            

a中𠮷   61 . E4     B8     AD .   F0     A0     AE     B7   -> 



                                                                                      
          Unicode编码                        Unicode编码标准具体实现内存中byte
                （ code point ）            UTF-8                 UTF-16
字符 十进制编号     十六进制                  

                  \x{61}
a    97           \u{61}                    61                    00 61 （ code units ）

                  \x{4E2D}
中   20013        \u{4E2D}                  E4 B8 AD              4E 2D


-----65535---------\x{FFFF}----------


                  \x{20BB7}
𠮷   134071       \u{20BB7}                 F0 A0 AE B7           D8 42 DF B7
                                                                  js/java \uD842\uDFB7

注意不是吉祥的吉.𠮷

var str = "a中𠮷" 

var len = str.length   4      //The length property of a String object indicates the [length] of a string, in UTF-16 [code units]

"a  中  𠮷"
[0][1][23]

console.log( str.charCodeAt(2).toString(16))    //d842    //returns an integer between 0 and 65535 representing the UTF-16 [code unit] at the given index.
console.log( str.charCodeAt(3).toString(16))    //dfb7

console.log( str.codePointAt(2).toString(16) )  //20bb7    //returns a non-negative integer that is the Unicode [code point] value.
console.log( str.codePointAt(3).toString(16) )  //dfb7     //If no UTF-16 surrogate pair begins at pos, the code unit at pos is returned.

var byteLen = new Blob([str]).size  8   //DOMStrings会被编码为UTF-8。






-----C语言 LINUX相关-------------------------------------------------------------------------------------------------------------------------------------

https://segmentfault.com/a/1190000015557812
https://segmentfault.com/a/1190000015676964
https://segmentfault.com/a/1190000015726535
《C专家编程》
https://segmentfault.com/a/1190000004684615



关键字             生命周期                       作用域(可见性)

extern            全局静态（程序结束后释放）       外部（整个程序）
static	          全局静态（程序结束后释放）       内部（仅编译单元，一般指单个源文件）
auto,register     函数调用（调用结束后释放）       函数


位置/作用域/生命周期/单多次赋值  类型内存大小  名称




----数据结构 算法相关----------------------------------------------------------------------------------------------------------------

DFS
深度遍历图的节点
从节点A出发，那些节点是可达的

   隐含的代码栈
   procedure DFS(G,v):
      label v as discovered
      for all directed edges from v to w that are in G.adjacentEdges(v) do
          if vertex w is not labeled as discovered then
              recursively call DFS(G,w)


  明确的数据栈
  procedure DFS-iterative(G,v):
      let S be a stack
      S.push(v)
      while S is not empty
          v = S.pop()
          if v is not labeled as discovered:
              label v as discovered
              for all edges from v to w in G.adjacentEdges(v) do 
                  S.push(w)




BFS   
广度遍历图的节点
从节点A出发，有前往节点B的路径吗？ 从节点A出发，前往节点B的哪条路径最短

 明确的数据队列
 procedure BFS(G,start_v):
    let Q be a queue
    label start_v as discovered
    Q.enqueue(start_v)
    while Q is not empty
        v = Q.dequeue()
        if v is the goal:
            return v
        for all edges from v to w in G.adjacentEdges(v) do
            if w is not labeled as discovered:
                label w as discovered
                w.parent = v
                Q.enqueue(w) 

  隐含的代码队列 ？








迭代：  不断重复进行某一运操作（分解）。   while for
        可选的把前一次运算结果 代入运算式进行下一次运算（依赖）。
        要解决最终的问题，必须先解决一个一开始的的问题，把开始的问题当做下个问题的输入，继续解决下个问题，再把下个问题的答案当做下下个问题的输入...直到解决最终的问题。

从原子问题到问题 自底向上实现
                
                                                                                                
                阶乘                                      
                斐波那契    
                n阶楼梯，每次可爬1阶或2阶   
                sum 1+2+3+...+100      
                欧几里德算法   牛顿迭代
                翻转字符串     
                PartitionOrder性质分组 (分割/循环不变式)     快排   
                BinSearch 二分查找 
                Enumerating  Traversal  yield (数据方面)
                不同问题用不同方式思考更方便

                1+2=2+1=3     时空
                1-2 =！2-1    时空依赖
                
                                   
递归： 一个运算（操作），可以通过不断调用本身形式（分解），往往需要通过前一次的结果来得到当前运算的结果（依赖），因而，程序运行时，总是先一次次地「回溯」前一次的结果  func（）{  func（） }
      从所需结果出发不断回溯前一运算直 到回到初值再递推得到所需结果。
      要解决最终的问题，必须先解决一个比最终问题小的问题，要解决比现有问题小的问题，必须要解决一个更小的问题...以此类推，直到最小的问题被解决，再一层层把结果传递回来，解决最终的问题。
      【边际分析 数学归纳】

从原问题逐渐缩小到原子问题 返回到原问题   自上而下再到上


https://blog.csdn.net/mengxiangjia_linxi/article/details/78158819
https://my.oschina.net/hosee/blog/616968

#递归
def fib1(n):
    if n==0:
        return 0
    elif n==1:
        return 1
    else:
        return fib1(n-1) + fib1(n-2)


memo = {0:0, 1:1}
def fib2(n):
    if not n in memo:
        memo[n] = fib2(n-1)+fib2(n-2)
    return memo[n]



#迭代 
memo = {0:0, 1:1}
def fib3(n):
    for i in range(2,n): 
        memo[i] = memoa[i-1] + memo[i-2] ;
    return memo[n]

def fib3(n):
    a, b = 0, 1
    for i in range(n):     
        a, b = b, a+b
    return a              

range(n)   = [0..n-1] = [0..n)   
range(2,n) = [2..n-1] = [2..n)


int fib2(int n) {
	int a = 0,  b = 1,  i = 0, 
        next_a, next_b, next_i;    //(a, b, i) 构成一个状态
	while(true) {
		if(i >= n) {
			break;
		}
		else {
			next_a = b; //根据当前状态计算下一个状态 //尾递归<-->迭代（循环不变式）
			next_b = a + b;
			next_i = i + 1;
			a = next_a; //更新当前状态
			b = next_b;
			i = next_i;
		}
	}
	return a;
}

int fib3(int n) {
	std::function<int(int, int, int)> iter;
	iter = [n, &iter](int a, int b, int i) {
		if(i >= n) {
			return a;
		}
		else {
			return iter(b, b + a, i + 1);
		}
	};
	return iter(0, 1, 0);
}
https://blog.csdn.net/ioriogami/article/details/12782141

                                     
                         a3           
           a2            b2=a1+b1             
     a1    b1=a0+b0       
a0   b0  
0    1     1             2            


function t (label, count, st, results){
    dbData =  select * from t where label = label start from st*10 limt 10
    excludeData = exclude(dbData)
    results = results + excludeData
     
    if(results=count)
        return results
    if(results>count)
        return resuls.slice(0,10)
     
    t (label, count, st, results)
}


function t (){
   label=label
   count=count 
   st = 0
  
   while(true){
        dbData =  select * from t where label = label start from st*10 limt 10
        excludeData = exclude(dbData)
        results = results + excludeData

        if(results=count)
          return results
        if(results>count)
          return resuls.slice(0,10)

        
        label=label
        count=count 
        st = st+1
   }   
}


循环      值不变              等式不变           表达式不变             
 w     label=label          st_w = w          results_w <= 10
       count=count    

 0    

 1

 2

 结束条件
 results_w == 10

C:\Users\Administrator\IdeaProjects\algs4>java -classpath "C:\Users\Administrator\IdeaProjects\algs4\target\classes" edu.princeton.cs.algs4.BinarySearch ./data/tinyW.txt < ./data/tinyT.txt

https://www.zhihu.com/question/26700198
https://www.zhihu.com/question/51937543
https://www.zhihu.com/question/20278387


 

 声明





加密     明文边密文            对称密钥   非对称公私钥

签名     防篡改替换明文                   pri（ h(明) ）              pub（ h(明) ） 
         中间人                               明                         明



密钥交换                              rsa 
                                     签名+dh
TLS 1.3 uses Diffie-Hellman key exchanges exclusively






cow  copy on write         mvcc

WAL Write-Ahead Logging，  REDO允许我们重新进行对数据的修改，UNDO允许我们撤销对数据的修改
    
         理性时空
         
自然语言  编程语言  形式语言 

         感性感觉

先有了自然语言和科学形式语言 再有的编程语言  语言最顶的时空最顶的感觉无法分解了 中间的都是组合  
第一时间 定义的关系   分析命题 
第二时间 关联的关系   综合命题
 
原始类型    复制赋值

一切皆对象  对象是键值对的集合[has组合]   对象有_p原型链类对象[is继承或实例]    传址赋值

   .                                                      直接调用[A].f()   this=A                                                    
   函数是对象 有pro<->construct 可运行变量有作用域链var-let     
   .                                                      构造调用B=new f() this=B






position   fix        outof文档流 其他盒子当它不存在
           absoulte

           relative
           static

                         display    block         可定义高宽      换行
                                    inline        包裹不可定义    不换行
                                    inline-block  包裹可定义      不换行

                                     float        outof文档流  其他盒子当它不存在 但内容占空间当期存在  


               连接符号
语言 正则文法

机器 nfa dfa



         a(b|c)h*

        



// Simple Arithmetics Grammar
// ==========================
//
// Accepts expressions like "2 * (3 + 4)" and computes their value.

+-    C1 C2 c3     ↙
* /   B1 B2 b3
()    A1 A2 A2   

     5 - (2-1) * 3 + 2
                   ↓  
     5 - (2-1) * 3   2            
       ↓
     5   (2-1) * 3
               ↓
         (2-1)   3
           ↓
          2 1
          
Addsub
  = head:Muldiv tail:(("+" / "-")Muldiv)* {
      return tail.reduce( (result, element)=>{
      	return element[0] === "+" ? result + element[1]: result - element[1];
      }, head );
    }
    
Muldiv
  = head:Bracket tail:(("*" / "/")Bracket)* {
      return tail.reduce( (result, element)=>{
      	return element[0] === "*" ? result * element[1]: result / element[1];
      }, head );
    }

Bracket
  = "("expr:Addsub")" { return expr; }
  / Integer

Integer "integer"
  = [0-9]+ { return parseInt(text(), 10); }



    is
he      tom  
               is 
            who  a teacher




        一元(隐含二元) 二元关系                                           名词
         
in of   时空 因果 目的手段 属性范畴

be      分析命题 人为定义  

has can 可分属性 内属性
                                                                        hope
hope do strike  动词能量                                                apple                               

hopefully hopeful 副词形容词   
quickly   quick  


I hopefully hope the hope of tom is hopful

The purpose of programming is to create a program that demonstrates a certain desired behaviour.







全球线路：
https://www.btnull.org
https://www.btnull.to
中国大陆线路：
https://www.btnull.nu
https://www.btnull.in
其他网址：
https://www.btnull.com




    隐含赋零值
变量声明 名称 类型            初始复制
var      i   int             = 1

var k, j int = 1, 2
var k, j  = 1, 2
k, j  := 1, 2  函数内短语句


for 3  1  0    for i := 0; i < 10; i++ {}       for sum < 1000 {}      for {} 
if  1  2       if x < 0 {}      if v := 1; v < lim {}    Switch


defer 


--------------------------
原始类型 打破砂锅问到底 最底部了
 
逻辑  bool
数学  int  uint无符号 
        byte   uint8的别名 ASCII字符  csdn.net/ScarletMeCarzy/article/details/106475998
        rune   int32的别名表示一个Unicode码点 UTF-8字符
      float32 float64
      complex64 complex128
语文  string

时空  *指针   &取址 *取值 二级引用 其他语言的引用类型

--------------------------                                                     栈
复合类型

struc{}
                  
[n]T 定长数组      []T  切片 底层定长数组的引用 变长切片数组     元素类型T

var a [5]int = {0,1,2,3,4}     

var s []int  = a[0:5] =  a[:]       len(s)      cap(s)+底层数组最后

s := make([]int, 5)         make切片

m := make(map[string]int)   make映射

for i := range sm {}        遍历切片映射


函数也是值 函数类型值。它们可以像其它值一样传递。(任意无限制输入输出函数类型 )
Go 函数可以是一个闭包。闭包是一个函数类型值，它引用了其函数体之外的变量。
该函数可以访问并赋予其引用的变量的值，换句话说，该函数被这些变量“绑定”在一起。         代码区
例如，函数 adder 返回一个闭包。每个闭包都被绑定在其各自的 sum 变量上。
副本传值(指针值 意义值布尔字符串数值)


数据+算法 模拟类                                                                  堆
                 
方法只是个带接收者参数的函数。
func (v Vertex) Scale(f float64) int    副本  
func (v *Vertex) Scale(f float64) int   本身  其他语言的this指针

接口类型 是由一组方法签名(带接收者参数的指定限制输入输出的函数类型 限制)定义的集合。
     
类型别名
type MyFloat float64
type A struct {
	S string
}
type ID interface {
	M()
}

     a3
   a1 a2                
     A  constructor           a1, a2  A
     B
     C       --| ICD          a1, a2  ICD
     D  ID   --|              a1, a2  ID


阻塞  单线 暂停？等数据操作     js   非阻塞  主js线程eventloop
异步  多线                          异步   主js线程<--消息队列-> 其他浏览器io线程   



1共享内存单口 原始类型（直接读写） 对象类型（通过方法读写） 锁 快照

2消息队列双口 对象类型     send 可关闭                          receive  for range   
 channel协程间的通信   有空 或 无空但有接受者   不阻塞      有数据 或 无数据但有发送者     
                      无空 且 无接受者          阻塞       无数据 且 无发送者     
 select 
   case     不阻塞里随机选一个  
   default  case都阻塞后执行  如果没有select将阻塞直到某个通道可以运行Go不会重新对 channel 或值进行求值。


3上下文Contexts 对象类型 https://pkg.go.dev/context#example-WithCancel  父子协程结构间的通信 ----封装细分常用---》 取消信号 超时信号 业务数据
pass a Context explicitly to each function that needs it. The Context should be the first parameter, typically named ctx:
Package context defines the Context type, which carries
  cancellation signals,  Context-child , CancelFunc  =  WithCancel(Context-parent )                                            cancel function is called, parent context's Done channel is closed,
  deadlines,             Context-child , CancelFunc  =  WithDeadline, WithTimeout(Context-parent )  when the deadline expires, cancel function is called, parent context's Done channel is closed, 
  other request-scoped values across API boundaries and between processes.    func WithValue(parent Context, key, val any) Context                 
            
